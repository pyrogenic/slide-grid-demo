{"version":3,"sources":["StrictDemo.tsx","SlideGrid.tsx","Demo.tsx","BasicDemo.tsx","FifteenGame.tsx","SlideGridTuningComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Mode","SLIDE_GRID_INSTANCE_ID","DRAGGING","SLIDING","DEFAULT_TUNING","dragStartDistanceSquared","slideDurationMS","smearDistanceSquaredMin","smearDistanceSquaredMax","longPressDurationMS","motionOnRails","keepDragInBounds","ignoreDragOutOfBounds","DRAGGING_STYLE_TRANSFORM","SlideGrid","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","lastInputEvent","uniqueId","tickHandle","graph","canExchange","a","b","undefined","done","key","tap","smear","exchange","tick","getTarget","event","target","keys","includes","id","parentElement","x","clientX","y","clientY","state","active","otherTarget","childElements","find","element","rect","getBoundingClientRect","elementLeft","left","elementTop","top","elementRight","right","elementBottom","bottom","buildGraph","Graph","forEach","aIndex","neighbors","cost","addNode","onMouseDown","objectSpread","kind","onMouseOrTouchDown","onMouseMove","onMouseOrTouchMove","onMouseUp","onMouseOrTouchUp","emptyLocation","downEventX","downEventY","touching","touchCount","console","log","setState","location","timestamp","Date","now","offsetX","offsetY","setTimeout","lastEventX","lastEventY","dx","Math","abs","dy","tuning","classList","contains","add","style","transform","arguments","length","_this$state","activeLocation","wiggle","canDrag","bounds","activeBounds","isDragging","newTransform","concat","path","shift","bKey","document","getElementById","newLocation","_loop","exchangeTarget","er","emptyLeft","emptyTop","sdx","sdy","transition","remove","targetX","targetY","d2","click","onTouchStart","recordTouch","onTouchMove","onTouchEnd","preventDefault","touches","i","react","className","compact","join","children","myDomElement","addEventListener","passive","warn","setInterval","clearInterval","prevProps","prevState","toFixed","newEmptyLocation","newState","map","child","e","React","NEXT_TILE_ID","Demo","ai","tiles","findIndex","bi","tile","getDefaultState","react_default","createElement","Row_default","Col_default","md","title","renderDemo","_this2","Fragment","renderHeader","src_SlideGrid_0","renderTileContent","push","createTile","toString","Component","BasicDemo","newDemo","StrictDemo","locked","getTileIndexById","bIndex","aRow","floor","aCol","bRow","bCol","costs","mode","lock","indexOf","splice","costDown","Form_default","Group","Label","Control","as","value","onChange","currentTarget","getOwnPropertyNames","classes","FifteenGame","blank","getTileByTitle","aBlank","getTileById","bBlank","Button_default","onClick","shuffle","SlideGridTuningComponent","sessionStorage","getItem","change","JSON","parse","setItem","stringify","type","Check","checked","prop","SlideGridLink","href","App","Container_default","SlideGridTuningComponent_SlideGridTuningComponent","src_BasicDemo","src_StrictDemo_0","src_FifteenGame","Boolean","window","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2cb19c45.chunk.js","sourcesContent":["import * as React from 'react';\nimport Demo, { ITile, IDemoState } from './Demo';\nimport \"./StrictDemo.css\";\nimport Form from 'react-bootstrap/Form';\n\nenum Mode {\n  lock = \"Lock\",\n  costUp = \"Cost Up\",\n  costDown = \"Cost Down\",\n}\n\ninterface IState extends IDemoState {\n  mode: Mode;\n  locked: string[];\n  costs: { [key: string]: number | undefined };\n}\n\nclass StrictDemo extends Demo<IState> {\n  protected title = \"Strict Demo\";\n\n  protected getDefaultState() {\n    return { tiles: this.newDemo(), mode: Mode.lock, locked: [], costs: {} };\n  }\n\n  protected renderHeader() {\n    return <Form>\n      <Form.Group>\n        <Form.Label>Click tiles to</Form.Label>\n      <Form.Control as=\"select\" value={this.state.mode.toString()} onChange={(e) => this.setState({ mode: e.currentTarget.value as Mode })}>\n        {Object.getOwnPropertyNames(Mode).map((key) => <option value={key}>{Mode[key as any]}</option>)}\n      </Form.Control>\n      </Form.Group>\n      </Form>;\n  }\n\n  protected renderTileContent(tile: ITile) {\n    const classes = [];\n    if (this.state.locked.includes(tile.id)) {\n      classes.push(\"locked\");\n    } else {\n      const cost = this.state.costs[tile.id] || 1;\n      classes.push(`cost-${cost}`);\n    }\n    return <div className={classes.join(\" \")}>\n      <div>{tile.title}</div>\n    </div>;\n  }\n\n  protected canExchange = (a: string, b?: string): boolean | number => {\n    if (this.state.locked.includes(a)) {\n      return false;\n    }\n    if (b === undefined) {\n      return true;\n    }\n    if (this.state.locked.includes(b)) {\n      return false;\n    }\n    const aIndex = this.getTileIndexById(a);\n    const bIndex = this.getTileIndexById(b);\n    const aRow = Math.floor(aIndex / 4);\n    const aCol = aIndex % 4\n    const bRow = Math.floor(bIndex / 4);\n    const bCol = bIndex % 4\n    const adjacent = (aRow === bRow && Math.abs(aCol - bCol) === 1)\n      || (aCol === bCol && Math.abs(aRow - bRow) === 1);\n    if (!adjacent) {\n      return false;\n    }\n    return this.state.costs[b] || true;\n  }\n\n  protected tap = (key: string) => {\n    console.log(`tap: ${key}`);\n    this.setState((state) => {\n      const { mode, locked, costs } = state;\n      if (mode === Mode.lock) {\n        const i = locked.indexOf(key);\n        if (i >= 0) {\n          locked.splice(i, 1);\n        } else {\n          locked.push(key);\n        }\n      } else {\n        let cost = costs[key];\n        const delta = mode === Mode.costDown ? -1 : 1;\n        cost = (cost || 1) + delta;\n        if (cost < 2) {\n          cost = 5;\n        } else if (cost > 5) {\n          cost = 1;\n        }\n        costs[key] = cost;\n      }\n      return { costs, locked };\n    });\n  }\n}\n\nexport default StrictDemo;\n","import * as React from \"react\";\nimport compact from \"lodash/compact\";\nimport \"./SlideGrid.css\";\nimport Graph from \"node-dijkstra\";\n\nlet SLIDE_GRID_INSTANCE_ID = 0;\n\n/** CSS classname of the slide-grid container */\nconst SLIDE_GRID = \"slide-grid\";\n\n/** CSS classname added to the slide-grid container when a long-press is detected on a child */\nconst WIGGLE = \"wiggle\";\n\n/** CSS classname added to an object under a mouse- or touch-down that's lasted at least 100ms that isn't yet being dragged */\n// const PRE_DRAGGING = \"pre-dragging\";\n\n/** CSS classname of the object being dragged under the cursor */\nconst DRAGGING = \"dragging\";\n\n/** CSS classname added to a child while it is animating to where it should be after an exchange but before {exchange} is actually called */\nconst SLIDING = \"sliding\";\n\nexport interface ISlideGridTuning {\n    dragStartDistanceSquared: number;\n    slideDurationMS: number;\n    smearDistanceSquaredMin: number;\n    smearDistanceSquaredMax: number;\n    longPressDurationMS: number;\n    motionOnRails: boolean;\n    keepDragInBounds: boolean;\n    ignoreDragOutOfBounds: boolean;\n}\n\nexport const DEFAULT_TUNING: ISlideGridTuning = {\n    dragStartDistanceSquared: 9,\n    slideDurationMS: 100,\n    smearDistanceSquaredMin: 20,\n    smearDistanceSquaredMax: 500,\n    longPressDurationMS: 300,\n    motionOnRails: false,\n    keepDragInBounds: false,\n    ignoreDragOutOfBounds: false,\n}\n\ninterface ISlideGridProps {\n    /**\n     * CSS class name for the main element.\n     */\n    className?: string;\n\n    tuning?: Partial<ISlideGridTuning>;\n\n    /**\n     * @param a key of the tile a user is interacting with\n     * @param b key of the tile that might be exchanged with {a}\n     * @returns {true} if {a} may be moved at all, and if given, may be exchanged with {b}\n     */\n    canExchange?(a: string, b?: string): boolean | number;\n\n    /** the player has finished an interaction that did not result in a {tap} or {exchange} */\n    done?(key: string): void;\n\n    /** the player clicked or tapped on {key} */\n    tap?(key: string): void;\n\n    /** the player is dragging their finger across {key}, but not sliding anything */\n    smear?(key: string): void;\n\n    /** the player dragged {a} into {b}'s place, so their positions should be exchanged */\n    exchange(a: string, b: string): void;\n}\n\ntype EmptyLocation = {\n    left: number;\n    top: number;\n};\n\ninterface ISlideGridState {\n    tuning: ISlideGridTuning;\n    active?: HTMLElement;\n    emptyLocation?: EmptyLocation;\n    location?: ILocation;\n    wiggle?: boolean;\n}\n\ninterface ILocation {\n    timestamp: number;\n    clientX: number;\n    clientY: number;\n    offsetX: number;\n    offsetY: number;\n}\n\ntype InputEventType = \"down\" | \"move\" | \"up\";\n\ninterface IInputEvent {\n    kind: InputEventType;\n    target: any;\n    clientX: number;\n    clientY: number;\n    touchCount?: number;\n}\n\nconst DRAGGING_STYLE_TRANSFORM = \"scale(1.25)\";\n\n/**\n * Immediate children must have the same \"key\" and \"id\" attributes:\n *  - key is used when dealing with the React side of things\n *  - id is used when manipulating the DOM.\n */\nclass SlideGrid extends React.Component<ISlideGridProps, ISlideGridState> {\n    private lastInputEvent: IInputEvent = {} as any;\n    private uniqueId: string;\n    private tickHandle: any;\n    private graph!: Graph;\n\n    constructor(props: ISlideGridProps) {\n        super(props);\n        const tuning = {...DEFAULT_TUNING, ...props.tuning};\n        this.state = {tuning};\n        this.uniqueId = `slide-grid-${++SLIDE_GRID_INSTANCE_ID}`;\n    }\n\n    public render() {\n        return <div id={this.uniqueId} className={compact([SLIDE_GRID, this.props.className, this.state.wiggle && WIGGLE]).join(\" \")}\n            onMouseDown={this.onMouseDown}\n            onMouseMove={this.onMouseMove}\n            onMouseUp={this.onMouseUp}>\n            {this.children}\n        </div>;\n    }\n\n    public componentDidMount() {\n        // React's unified event system uses passive handlers which makes avoiding scroll-on-touch-drag impossible \n        const myDomElement = this.myDomElement;\n        if (myDomElement) {\n            myDomElement.addEventListener(\"touchstart\", this.onTouchStart as any, { passive: false });\n            myDomElement.addEventListener(\"touchmove\", this.onTouchMove as any, { passive: false });\n            myDomElement.addEventListener(\"touchend\", this.onTouchEnd as any, { passive: false });\n            myDomElement.addEventListener(\"touchcancel\", this.onTouchEnd as any, { passive: false });\n        } else {\n            console.warn(`Couldn't find myself in the DOM, touch support unavailable. (id: ${this.uniqueId})`);\n        }\n        this.tickHandle = setInterval(this.tick, 100);\n        this.buildGraph();\n    }\n\n    public componentWillUnmount() {\n        const tickHandle = this.tickHandle;\n        if (tickHandle !== undefined) {\n            this.tickHandle = undefined;\n            clearInterval(this.tickHandle);\n        }\n    }\n\n    private get myDomElement()  {\n        return document.getElementById(this.uniqueId);\n    }\n\n    /** the list of our React children. */\n    private get children(): any[] {\n        return (this.props.children || []) as any[];\n    }\n\n    /** the list of the React keys of our {children}. */\n    private get keys(): string[] {\n        return this.children.map((child) => child.key);\n    }\n\n    /** the list of DOM elements which are the visual manifestations of our React {children}. */\n    private get childElements(): HTMLElement[] {\n        return compact(this.keys.map((e) => document.getElementById(e)));\n    }\n\n    private get tuning(): ISlideGridTuning {\n        return this.state.tuning;\n    }\n\n    /** thunk — default behavior: any pair may be picked up or exchanged */\n    private canExchange = (a: string, b?: string): boolean | number => {\n        const {canExchange} = this.props;\n        if (canExchange === undefined) {\n            return true;\n        }\n        return canExchange(a, b);\n    };\n\n    /** thunk — default behavior: no-op */\n    private done = (key: string) => {\n        const {done} = this.props;\n        if (done === undefined) {\n            return;\n        }\n        return done(key);\n    };\n\n    /** thunk — default behavior: no-op */\n    private tap = (key: string) => {\n        const {tap} = this.props;\n        if (tap === undefined) {\n            return;\n        }\n        return tap(key);\n    };\n\n    /** thunk — default behavior: no-op */\n    private smear = (key: string) => {\n        const {smear} = this.props;\n        if (smear === undefined) {\n            return;\n        }\n        return smear(key);\n    };\n\n    /** thunk */\n    private exchange = (a: string, b: string) => {\n        const {exchange} = this.props;\n        exchange(a, b);\n    };\n\n    /** detects long-presses: a long touch where the touch doesn't move enough to start a drag. */\n    private tick = () => {\n        // const {active, location} = this.state;\n        // const touching = this.lastInputEvent.touchCount !== undefined;\n        // const dt = location && Date.now() - location.timestamp;\n        // if (active && touching && dt && dt > this.state.tuning.slideDurationMS) {\n        //     if (!this.state.wiggle) {\n        //         if (this.canExchange(active.id) !== false) {\n        //             this.setState({wiggle: true});\n        //         }\n        //     }\n        // }\n    }\n\n    /** @returns the child under the given event, passing through the actively-dragged child, if any */\n    private getTarget = (event: IInputEvent): HTMLElement | undefined => {\n        let target: any = event.target;\n        // bubble-up until we find a direct child\n        while (target && !this.keys.includes(target.id)) {\n            target = target.parentElement;\n        }\n        const x = event.clientX;\n        const y = event.clientY;\n        if (target && this.state.active === target) {\n            const otherTarget = this.childElements.find((element) => {\n                if (element === target) {\n                    return false;\n                }\n                const rect = element.getBoundingClientRect();\n                const elementLeft = rect.left;\n                const elementTop = rect.top;\n                const elementRight = rect.right;\n                const elementBottom = rect.bottom;\n                return (\n                    x > elementLeft &&\n                    x < elementRight &&\n                    y > elementTop &&\n                    y < elementBottom);\n            });\n            if (otherTarget) {\n                return otherTarget;\n            }\n        }\n        return target;\n    }\n\n    public componentDidUpdate(prevProps: ISlideGridProps, prevState: ISlideGridState) {\n        const target = this.state.active;\n        const location = this.state.location;\n        const emptyLocation = this.state.emptyLocation;\n        // After an exchange, make sure we know the new location of the dragged child,\n        // then update its transform so it appears that it hasn't moved from under the cursor.\n        if (target && location && emptyLocation && target.classList.contains(DRAGGING)) {\n            console.log(\"clear target transform\");\n            target.style.transform = null;\n            const rect = target.getBoundingClientRect();\n            target.style.transform = DRAGGING_STYLE_TRANSFORM;\n            if (rect.left.toFixed(0) !== emptyLocation.left.toFixed(0)\n                || rect.top.toFixed(0) !== emptyLocation.top.toFixed(0)) {\n                const newEmptyLocation = {\n                    left: rect.left,\n                    top: rect.top,\n                }\n                const newState = {\n                    emptyLocation: newEmptyLocation,\n                    location: {\n                        timestamp: location.timestamp,\n                        clientX: newEmptyLocation.left + location.offsetX,\n                        clientY: newEmptyLocation.top + location.offsetY,\n                        offsetX: location.offsetX,\n                        offsetY: location.offsetY,\n                    },\n                };\n                this.setState(newState);\n                return;\n            }\n        }\n        this.buildGraph();\n        if (this.lastInputEvent.kind === \"move\") {\n            this.onMouseOrTouchMove(this.lastInputEvent, true);\n        }\n    }\n\n    private buildGraph = () => {\n        const graph = new Graph();\n        this.keys.forEach((a, aIndex, keys) => {\n            const neighbors: {[key: string]: number} = {};\n            keys.forEach((b) => {\n                if (a === b) {\n                    return;\n                }\n                const cost = this.canExchange(a, b);\n                if (cost !== false) {\n                    neighbors[b] = cost === true ? 1 : cost;\n                }\n            });\n            graph.addNode(a, neighbors);\n        });\n        this.graph = graph;\n    }\n\n    private onMouseDown = (event: React.MouseEvent<any, MouseEvent>) => {\n        this.lastInputEvent = { kind: \"down\", ...event };\n        this.onMouseOrTouchDown(this.lastInputEvent);\n    }\n\n    private onMouseMove = (event: React.MouseEvent<any, MouseEvent>) => {\n        this.lastInputEvent = { kind: \"move\", ...event };\n        this.onMouseOrTouchMove(this.lastInputEvent);\n    }\n\n    private onMouseUp = (event: React.MouseEvent<any, MouseEvent>) => {\n        this.lastInputEvent = { kind: \"up\", ...event };\n        this.onMouseOrTouchUp(this.lastInputEvent);\n    }\n\n    private onMouseOrTouchDown = (event: IInputEvent) => {\n        const target = this.getTarget(event);\n        if (target) {\n            const rect = target.getBoundingClientRect();\n            const emptyLocation = {\n                left: rect.left,\n                top: rect.top,\n            }\n            const downEventX = event.clientX;\n            const downEventY = event.clientY;\n            const touching = event.touchCount !== undefined;\n            console.log({touching});\n            this.setState({\n                active: target,\n                emptyLocation,\n                location: {\n                    timestamp: Date.now(),\n                    clientX: downEventX,\n                    clientY: downEventY,\n                    offsetX: downEventX - rect.left,\n                    offsetY: downEventY - rect.top,\n                },\n            });\n            setTimeout(() => {\n                const {active} = this.state;\n                if (active !== target) {\n                    return;\n                }\n                if (touching && this.props.smear) {\n                    const lastEventX = this.lastInputEvent.clientX;\n                    const lastEventY = this.lastInputEvent.clientY;\n                    let dx = Math.abs(downEventX - lastEventX);\n                    let dy = Math.abs(downEventY - lastEventY);\n                    const d2 = dx * dx + dy * dy;\n                    if (d2 > this.tuning.smearDistanceSquaredMin) {\n                        console.log(\"Moved too far with touch — smearing instead of bulging\");\n                        return;\n                    }\n                }\n                if (active === target && !target.classList.contains(DRAGGING) && this.canExchange(target.id) !== false) {\n                    target.classList.add(DRAGGING);\n                    target.style.transform = DRAGGING_STYLE_TRANSFORM;\n                }\n            }, this.tuning.longPressDurationMS);\n        }\n    }\n\n    private onMouseOrTouchMove = (event: IInputEvent, onlyUpdateActive: boolean = false) => {\n        const target = !onlyUpdateActive && this.getTarget(event);\n        const { active, emptyLocation, location: activeLocation } = this.state;\n        if (!active || !activeLocation) {\n            return;\n        }\n        console.log({touchCount: event.touchCount, wiggle: this.state.wiggle});\n        let canDrag = event.touchCount === undefined || event.touchCount > 1 || active.classList.contains(DRAGGING);\n        let dx = event.clientX - activeLocation.clientX;\n        let dy = event.clientY - activeLocation.clientY;\n        if (canDrag && this.tuning.ignoreDragOutOfBounds) {\n            const bounds = active.parentElement!.getBoundingClientRect();\n            const activeBounds = active.getBoundingClientRect();\n            if (activeBounds.left + dx < bounds.left ||\n                activeBounds.top + dy < bounds.top ||\n                activeBounds.right + dx > bounds.right ||\n                activeBounds.bottom + dy > bounds.bottom) {\n                return;\n            }\n        }\n        if (canDrag) {\n            let isDragging = active.classList.contains(DRAGGING);\n            const d2 = dx * dx + dy * dy;\n            if (!isDragging && d2 > this.tuning.dragStartDistanceSquared) {\n                if (this.canExchange(active.id) !== false) {\n                    active.classList.add(DRAGGING);\n                    isDragging = true;\n                }\n            }\n            if (isDragging) {\n                if (this.tuning.motionOnRails) {\n                    if (Math.abs(dx) > Math.abs(dy)) {\n                        dy = 0;\n                    } else {\n                        dx = 0;\n                    }\n                }\n                if (this.tuning.keepDragInBounds) {\n                    const bounds = active.parentElement!.getBoundingClientRect();\n                    const activeBounds = active.getBoundingClientRect();\n                    if (activeBounds.left + dx < bounds.left) {\n                        dx = bounds.left - activeBounds.left;\n                    }\n                    if (activeBounds.top + dy < bounds.top) {\n                        dy = bounds.top - activeBounds.top;\n                    }\n                    if (activeBounds.right + dx > bounds.right) {\n                        dx = bounds.right - activeBounds.right;\n                    }\n                    if (activeBounds.bottom + dy > bounds.bottom) {\n                        dy = bounds.bottom - activeBounds.bottom;\n                    }\n                }\n                const newTransform = `translate(${dx}px,${dy}px) ${DRAGGING_STYLE_TRANSFORM}`;\n                active.style.transform = newTransform;\n                if (target) {\n                    if (target === active) {\n                        return;\n                    }\n                    const path: string[] | undefined = this.graph.path(active.id, target.id);\n                    if (!path) {\n                        return;\n                    }\n                    // pop active node off the path\n                    path.shift();\n                    if (path.find((bKey) => {\n                        const b = document.getElementById(bKey)!;\n                        return b.classList.contains(SLIDING);\n                    })) {\n                        return;\n                    }\n                    let newLocation = emptyLocation!\n                    while (path.length > 0) {\n                        const exchangeTarget = document.getElementById(path.shift()!)!;\n                        const er = exchangeTarget.getBoundingClientRect();\n                        const emptyLeft = newLocation.left;\n                        const emptyTop = newLocation.top;\n                        const sdx = emptyLeft - er.left;\n                        const sdy = emptyTop - er.top;\n                        newLocation = er;\n                        exchangeTarget.classList.add(SLIDING);\n                        exchangeTarget.style.transform = `translate(${sdx}px,${sdy}px)`;\n                        exchangeTarget.style.transition = `all ${this.tuning.slideDurationMS}ms ease-in-out`;\n                        const a = active.id;\n                        const b = exchangeTarget.id;\n                        setTimeout(() => {\n                            exchangeTarget.classList.remove(SLIDING);\n                            exchangeTarget.style.transform = null;\n                            exchangeTarget.style.transition = \"\";\n                            this.exchange(a, b);\n                        }, this.tuning.slideDurationMS);\n                    }\n                }\n            }\n        } else if (target && this.props.smear) { // touching something\n            const targetX = (target.getBoundingClientRect().left + target.getBoundingClientRect().right) / 2;\n            const targetY = (target.getBoundingClientRect().top + target.getBoundingClientRect().bottom) / 2;\n            let dx = Math.abs(event.clientX - targetX);\n            let dy = Math.abs(event.clientY - targetY);\n            const d2 = dx * dx + dy * dy;\n            if (target === active ? d2 > this.tuning.smearDistanceSquaredMin : d2 < this.tuning.smearDistanceSquaredMax) {\n                this.smear(target.id);\n            }\n        }\n    }\n\n    private onMouseOrTouchUp = (event: IInputEvent) => {\n        const target = this.getTarget(event);\n        const state = this.state;\n        let click: string;\n        let done: string;\n        if (state.active) {\n            done = state.active.id;\n            if (state.active.classList.contains(DRAGGING)) {\n                state.active.classList.remove(DRAGGING);\n            } else if (event.touchCount === undefined) {\n                click = state.active.id;\n            } else if (target === state.active && state.location) {\n                const dt = Date.now() - state.location.timestamp;\n                if (dt < this.tuning.longPressDurationMS) {\n                    click = state.active.id;\n                }\n            }\n            state.active.style.transform = null;\n        }\n        this.setState({ active: undefined, location: undefined, wiggle: false }, () => {\n            if (click) {\n                this.tap(click);\n            } else {\n                this.done(done);\n            }\n        });\n    }\n\n    private onTouchStart = (event: TouchEvent) => {\n        this.onMouseOrTouchDown(this.recordTouch(\"down\", event))\n    }\n\n    private onTouchMove = (event: TouchEvent) => {\n        this.onMouseOrTouchMove(this.recordTouch(\"move\", event))\n    }\n\n    private onTouchEnd = (event: TouchEvent) => {\n        this.onMouseOrTouchUp(this.recordTouch(\"up\", event));\n    }\n\n    private recordTouch = (kind: InputEventType, event: TouchEvent) => {\n        event.preventDefault(); // prevents generation of mouse events \n        const touchCount = event.touches.length;\n        let clientX = 0;\n        let clientY = 0;\n        for (let i = 0; i < touchCount; ++i) {\n            clientX += event.touches[i].clientX;\n            clientY += event.touches[i].clientY;\n        }\n        clientX /= touchCount;\n        clientY /= touchCount;\n        this.lastInputEvent = { kind, target: event.target, clientX, clientY, touchCount }\n        return this.lastInputEvent;\n    }\n}\n\nexport default SlideGrid;\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport SlideGrid, { ISlideGridTuning } from './SlideGrid';\n\nlet NEXT_TILE_ID = 0;\n\nexport interface ITile {\n  id: string;\n  title: string;\n}\n\nexport interface IDemoState {\n  tiles: ITile[];\n}\n\nexport interface IDemoProps {\n  tuning: ISlideGridTuning;\n};\n\nexport default abstract class Demo<TState extends IDemoState = IDemoState> extends React.Component<IDemoProps, TState> {\n  protected tap?: ((key: string) => void);\n  protected smear?: ((key: string) => void);\n\n  constructor(props: Readonly<IDemoProps>) {\n    super(props);\n    this.state = this.getDefaultState();\n  }\n\n  public render() {\n    return <Row className=\"demo\">\n      <Col />\n      <Col md={\"auto\"}>\n        <h3>{this.title}</h3>\n        {this.renderDemo()}\n      </Col>\n      <Col />\n    </Row>;\n  }\n\n  protected abstract get title(): string;\n\n  protected abstract getDefaultState(): Readonly<TState>;\n\n  protected canExchange?(a: string, b?: string): boolean | number;\n\n  protected getTileById(id: string) {\n    return this.state.tiles.find((e) => e.id === id)!;\n  }\n\n  protected getTileIndexById(id: string) {\n    return this.state.tiles.findIndex((e) => e.id === id)!;\n  }\n\n  protected getTileByTitle(title: string) {\n    return this.state.tiles.find((e) => e.title === title)!;\n  }\n\n  protected getTileIndexByTitle(title: string) {\n    return this.state.tiles.findIndex((e) => e.title === title)!;\n  }\n\n  protected renderDemo() {\n    const { tuning } = this.props;\n    return <>\n    {this.renderHeader()}\n    <SlideGrid tuning={tuning} exchange={this.exchange} canExchange={this.canExchange} tap={this.tap} smear={this.smear}>\n      {this.state.tiles.map((tile) => <div className=\"tile\" key={tile.id} id={tile.id}>\n        {this.renderTileContent(tile)}\n      </div>)}\n    </SlideGrid>\n    </>;\n  }\n  \n  protected renderHeader(): any {\n    return false;\n  }\n\n  protected renderTileContent(tile: ITile) {\n    return <div>{tile.title}</div>;\n  }\n\n  protected createTile(title: string) {\n    return { id: `tile-${NEXT_TILE_ID++}`, title };\n  }\n\n  protected newDemo() {\n    const tiles: ITile[] = []\n    for (let i = 1; i <= 16; ++i) {\n      tiles.push(this.createTile(i.toString()));\n    }\n    return tiles;\n  }\n\n  protected exchange = (a: string, b: string) => {\n    this.setState((state) => {\n      const ai = state.tiles.findIndex((e) => e.id === a);\n      const bi = state.tiles.findIndex((e) => e.id === b);\n      const tiles: ITile[] = [];\n      state.tiles.forEach((tile, i) => {\n        if (i === ai) {\n          tiles[bi] = tile;\n        } else if (i === bi) {\n          tiles[ai] = tile;\n        } else {\n          tiles[i] = tile;\n        }\n      });\n      return { tiles };\n    })\n  }\n\n}\n\n\n","import * as React from 'react';\nimport Demo, {ITile, IDemoState} from './Demo';\n\nclass BasicDemo extends Demo {\n  protected title = \"Basic Demo\";\n  \n  protected getDefaultState(): Readonly<IDemoState> {\n    return { tiles: this.newDemo() };\n  }\n  \n  protected renderTileContent(tile: ITile) {\n    return <div>{tile.title}</div>;\n  }\n}\n\nexport default BasicDemo;\n","import compact from 'lodash/compact';\nimport shuffle from 'lodash/shuffle';\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Demo, { IDemoState } from './Demo';\nimport SlideGrid from './SlideGrid';\n\nclass FifteenGame extends Demo {\n  protected title = \"15 Game\";\n  \n  protected getDefaultState(): Readonly<IDemoState> {\n    return { tiles: this.newDemo() };\n  }\n\n  protected newDemo() {\n    const tiles = [this.createTile(\"_\")];\n    for (let i = 1; i <= 15; ++i) {\n      tiles.push(this.createTile(i.toString()));\n    }\n    return tiles;\n  }\n\n  protected renderDemo() {\n    return <>\n      <Row className=\"mb-1\">\n        <Button onClick={() => this.setState({ tiles: this.newDemo() })}>Reset</Button>\n        &nbsp;\n    <Button onClick={() => this.setState({ tiles: shuffle(this.state.tiles) })}>Shuffle</Button>\n      </Row>\n      <Row>\n        <SlideGrid exchange={this.exchange} canExchange={this.canExchange} tap={this.tap}>\n          {this.state.tiles.map((tile) => <div className={compact([\"tile\", tile.title === \"_\" && \"blank\"]).join(\" \")} key={tile.id} id={tile.id}>\n            <div>{tile.title}</div>\n          </div>)}\n        </SlideGrid>\n      </Row>\n    </>;\n  }\n\n  protected tap = (id: string) => {\n    const blank = this.getTileByTitle(\"_\");\n    if (this.canExchange(id, blank.id)) {\n      this.exchange(id, blank.id);\n    }\n  }\n\n  protected canExchange = (a: string, b?: string): boolean => {\n    const aBlank = this.getTileById(a).title === \"_\";\n    if (!b) {\n      b = this.getTileByTitle(\"_\").id;\n    }\n    const bBlank = this.getTileById(b).title === \"_\";\n    if (!(aBlank || bBlank)) {\n      return false;\n    }\n\n    const aIndex = this.getTileIndexById(a);\n    const bIndex = this.getTileIndexById(b);\n    const aRow = Math.floor(aIndex / 4);\n    const aCol = aIndex % 4\n    const bRow = Math.floor(bIndex / 4);\n    const bCol = bIndex % 4\n    return (aRow === bRow && Math.abs(aCol - bCol) === 1)\n      || (aCol === bCol && Math.abs(aRow - bRow) === 1);\n  };\n}\n\nexport default FifteenGame;\n\n","import React from \"react\";\nimport { ISlideGridTuning } from \"./SlideGrid\";\nimport Form from \"react-bootstrap/Form\";\n\nexport default class SlideGridTuningComponent extends React.Component<{ tuning: ISlideGridTuning, change(tuning: Partial<ISlideGridTuning>): void }> {\n    public componentDidMount() {\n        const tuning = sessionStorage.getItem(\"SlideGridTuning\");\n        if (tuning) {\n            this.props.change(JSON.parse(tuning as any));\n        }\n    }\n\n    public componentDidUpdate() {\n        sessionStorage.setItem(\"SlideGridTuning\", JSON.stringify(this.props.tuning));\n    }\n\n    public render() {\n        const { tuning } = this.props;\n        return <Form>\n            <Form.Group>\n                <Form.Label>Drag Start Distance</Form.Label>\n                <Form.Control type=\"number\" value={tuning.dragStartDistanceSquared.toString()}\n                    onChange={(event: any) => this.props.change({ dragStartDistanceSquared: event.target.value })}/>\n            </Form.Group>\n            <Form.Group>\n                <Form.Label>Motion on Rails</Form.Label>\n                <Form.Check checked={tuning.motionOnRails}\n                    onChange={(event: any) => this.props.change({ motionOnRails: !tuning.motionOnRails })}/>\n            </Form.Group>\n            <Form.Group>\n                <Form.Label>keepDragInBounds</Form.Label>\n                <Form.Check checked={tuning.keepDragInBounds}\n                    onChange={(event: any) => this.props.change({ keepDragInBounds: !tuning.keepDragInBounds })}/>\n            </Form.Group>\n            <Form.Group>\n                <Form.Label>ignoreDragOutOfBounds</Form.Label>\n                <Form.Check checked={tuning.ignoreDragOutOfBounds}\n                    onChange={(event: any) => this.props.change({ ignoreDragOutOfBounds: !tuning.ignoreDragOutOfBounds })}/>\n            </Form.Group>\n            <ul>\n                    {Object.getOwnPropertyNames(tuning).map((prop) =>\n                        <li key={prop}>{prop}: {`${tuning[prop as keyof ISlideGridTuning]}`}</li>\n                    )}\n                </ul>\n        </Form>;\n        }\n}","import React from 'react';\n// import { ISlideGridTuning } from '@pyrogenic/slide-grid/lib/SlideGrid';\nimport { ISlideGridTuning, DEFAULT_TUNING } from './SlideGrid';\nimport Container from 'react-bootstrap/Container';\nimport './App.css';\nimport BasicDemo from './BasicDemo';\nimport StrictDemo from './StrictDemo';\nimport FifteenGame from './FifteenGame';\nimport SlideGridTuningComponent from './SlideGridTuningComponent';\n\nfunction SlideGridLink() {\n  return <a href=\"https://github.com/pyrogenic/slide-grid\"><code>slide-grid</code></a>;\n}\n\nclass App extends React.Component<{}, { tuning: ISlideGridTuning }> {\n  constructor(props: {}) {\n    super(props);\n    this.state = { tuning: DEFAULT_TUNING };\n  }\n  public render() {\n    const {tuning} = this.state;\n    return <Container>\n      <h1>\n        <SlideGridLink />\n      </h1>\n      <h2>Overview</h2>\n      <p>\n        <SlideGridLink /> is a hybrid React/DOM component that supports lightweight, touch-aware reordering of children.\n      </p>\n      <h2>Tuning</h2>\n      <SlideGridTuningComponent tuning={this.state.tuning}\n        change={(tuning) => {\n          this.setState((state) => {\n            return { tuning: {...state.tuning, ...tuning} } as any;\n        });\n      }} />\n      <h2>Demos</h2>\n      <BasicDemo tuning={tuning}/>\n      <StrictDemo tuning={tuning}/>\n      <FifteenGame tuning={tuning}/>\n    </Container>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}